{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/alvinneri/Desktop/Projects/PMS Mobile/property-management-mobile/employee-app/screens/maintenance/Scanner.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from \"react\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport { BarCodeScanner } from \"expo-barcode-scanner\";\nimport BarcodeMask from \"react-native-barcode-mask\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setLoading, setScannedAsset } from \"../../redux/public/actions\";\nvar finderWidth = 280;\nvar finderHeight = 230;\nvar width = Dimensions.get(\"window\").width;\nvar height = Dimensions.get(\"window\").height;\nvar viewMinX = (width - finderWidth) / 2;\nvar viewMinY = (height - finderHeight) / 2;\nexport var Scanner = function Scanner(_ref) {\n  var openScanner = _ref.openScanner,\n      setOpenScanner = _ref.setOpenScanner;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(BarCodeScanner.Constants.Type.back),\n      _useState4 = _slicedToArray(_useState3, 2),\n      type = _useState4[0],\n      setType = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      scanned = _useState6[0],\n      setScanned = _useState6[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.public;\n  }),\n      user = _useSelector.user;\n\n  var dispatch = useDispatch();\n  useEffect(function () {\n    (function _callee() {\n      var _await$BarCodeScanner, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(BarCodeScanner.requestPermissionsAsync());\n\n            case 2:\n              _await$BarCodeScanner = _context.sent;\n              status = _await$BarCodeScanner.status;\n              setHasPermission(status === \"granted\");\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var saveData = function saveData(data) {\n    var id = data.split(\"_\")[0];\n    var assetName = data.split(\"_\")[1];\n    var assetCode = data.split(\"_\")[2];\n    var areaCode = data.split(\"_\")[3];\n    var areaName = data.split(\"_\")[3];\n    dispatch(setScannedAsset({\n      id: id,\n      assetName: assetName,\n      assetCode: assetCode,\n      areaCode: areaCode,\n      areaName: areaName\n    }));\n  };\n\n  var handleBarCodeScanned = function handleBarCodeScanned(scanningResult) {\n    if (!scanned) {\n      var _type = scanningResult.type,\n          data = scanningResult.data,\n          _scanningResult$bound = scanningResult.bounds;\n      _scanningResult$bound = _scanningResult$bound === void 0 ? {} : _scanningResult$bound;\n      var origin = _scanningResult$bound.origin;\n      var x = origin.x,\n          y = origin.y;\n\n      if (x >= viewMinX && y >= viewMinY && x <= viewMinX + finderWidth / 2 && y <= viewMinY + finderHeight / 2) {\n        setScanned(true);\n        saveData(data);\n        Alert.alert(\"Scanned Asset\", \"Asset Name \" + data.split(\"_\")[1] + \". Asset Code \" + data.split(\"_\")[2], [{\n          text: \"Cancel\",\n          onPress: function onPress() {\n            return dispatch(setScannedAsset(null));\n          },\n          style: \"cancel\"\n        }, {\n          text: \"OK\",\n          onPress: function onPress() {\n            return setOpenScanner(false);\n          }\n        }]);\n      }\n    }\n  };\n\n  if (hasPermission === null) {\n    return React.createElement(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 12\n      }\n    }, \"Requesting for camera permission\");\n  }\n\n  if (hasPermission === false) {\n    return React.createElement(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 12\n      }\n    }, \"No access to camera\");\n  }\n\n  return React.createElement(SafeAreaView, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, React.createElement(Modal, {\n    animationType: \"slide\",\n    transparent: true,\n    visible: openScanner,\n    onRequestClose: function onRequestClose() {\n      setOpenScanner(!openScanner);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      paddingTop: 20\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, React.createElement(BarCodeScanner, {\n    onBarCodeScanned: handleBarCodeScanned,\n    type: type,\n    barCodeTypes: [BarCodeScanner.Constants.BarCodeType.qr],\n    style: [StyleSheet.absoluteFillObject, styles.container],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      backgroundColor: \"transparent\",\n      flexDirection: \"row\",\n      margin: 30\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, React.createElement(BarcodeMask, {\n    edgeColor: \"#62B1F6\",\n    showAnimatedLine: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 15\n    }\n  }), React.createElement(TouchableOpacity, {\n    style: {\n      flex: 1,\n      alignItems: \"center\"\n    },\n    onPress: function onPress() {\n      setScanned(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 15\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontSize: 18,\n      margin: 5,\n      color: \"white\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }\n  }, \"SCAN AGAIN\")), React.createElement(TouchableOpacity, {\n    style: {\n      flex: 1,\n      alignItems: \"flex-start\"\n    },\n    onPress: function onPress() {\n      setOpenScanner(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 15\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontSize: 18,\n      margin: 5,\n      color: \"white\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }\n  }, \"BACK\")), React.createElement(TouchableOpacity, {\n    style: {\n      flex: 1,\n      alignItems: \"flex-end\"\n    },\n    onPress: function onPress() {\n      setType(type === BarCodeScanner.Constants.Type.back ? BarCodeScanner.Constants.Type.front : BarCodeScanner.Constants.Type.back);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 15\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontSize: 18,\n      margin: 5,\n      color: \"white\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 17\n    }\n  }, \" \", \"Flip\", \" \")))))));\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\"\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: \"80%\"\n  }\n});","map":{"version":3,"sources":["/Users/alvinneri/Desktop/Projects/PMS Mobile/property-management-mobile/employee-app/screens/maintenance/Scanner.js"],"names":["React","useEffect","useState","BarCodeScanner","BarcodeMask","useSelector","useDispatch","setLoading","setScannedAsset","finderWidth","finderHeight","width","Dimensions","get","height","viewMinX","viewMinY","Scanner","openScanner","setOpenScanner","hasPermission","setHasPermission","Constants","Type","back","type","setType","scanned","setScanned","state","public","user","dispatch","requestPermissionsAsync","status","saveData","data","id","split","assetName","assetCode","areaCode","areaName","handleBarCodeScanned","scanningResult","bounds","origin","x","y","Alert","alert","text","onPress","style","flex","paddingTop","BarCodeType","qr","StyleSheet","absoluteFillObject","styles","container","backgroundColor","flexDirection","margin","alignItems","fontSize","color","front","create","justifyContent","title","fontWeight","separator","marginVertical"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  Button,\n  Dimensions,\n  StyleSheet,\n  TouchableOpacity,\n  Text,\n  View,\n  Modal,\n  Alert,\n  SafeAreaView,\n} from \"react-native\";\nimport { BarCodeScanner } from \"expo-barcode-scanner\";\nimport BarcodeMask from \"react-native-barcode-mask\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setLoading, setScannedAsset } from \"../../redux/public/actions\";\nconst finderWidth = 280;\nconst finderHeight = 230;\nconst width = Dimensions.get(\"window\").width;\nconst height = Dimensions.get(\"window\").height;\nconst viewMinX = (width - finderWidth) / 2;\nconst viewMinY = (height - finderHeight) / 2;\n\nexport const Scanner = ({ openScanner, setOpenScanner }) => {\n  const [hasPermission, setHasPermission] = useState(null);\n  const [type, setType] = useState(BarCodeScanner.Constants.Type.back);\n  const [scanned, setScanned] = useState(false);\n  const { user } = useSelector((state) => state.public);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    (async () => {\n      const { status } = await BarCodeScanner.requestPermissionsAsync();\n      setHasPermission(status === \"granted\");\n    })();\n  }, []);\n\n  const saveData = (data) => {\n    let id = data.split(\"_\")[0];\n    let assetName = data.split(\"_\")[1];\n    let assetCode = data.split(\"_\")[2];\n    let areaCode = data.split(\"_\")[3];\n    let areaName = data.split(\"_\")[3];\n\n    dispatch(\n      setScannedAsset({\n        id,\n        assetName,\n        assetCode,\n        areaCode,\n        areaName,\n      })\n    );\n  };\n\n  const handleBarCodeScanned = (scanningResult) => {\n    if (!scanned) {\n      const { type, data, bounds: { origin } = {} } = scanningResult;\n\n      const { x, y } = origin;\n\n      if (\n        x >= viewMinX &&\n        y >= viewMinY &&\n        x <= viewMinX + finderWidth / 2 &&\n        y <= viewMinY + finderHeight / 2\n      ) {\n        setScanned(true);\n        saveData(data);\n        Alert.alert(\n          \"Scanned Asset\",\n          `Asset Name ${data.split(\"_\")[1]}. Asset Code ${data.split(\"_\")[2]}`,\n          [\n            {\n              text: \"Cancel\",\n              onPress: () => dispatch(setScannedAsset(null)),\n              style: \"cancel\",\n            },\n            { text: \"OK\", onPress: () => setOpenScanner(false) },\n          ]\n        );\n      }\n    }\n  };\n\n  if (hasPermission === null) {\n    return <Text>Requesting for camera permission</Text>;\n  }\n\n  if (hasPermission === false) {\n    return <Text>No access to camera</Text>;\n  }\n\n  return (\n    <SafeAreaView>\n      <Modal\n        animationType=\"slide\"\n        transparent={true}\n        visible={openScanner}\n        onRequestClose={() => {\n          setOpenScanner(!openScanner);\n        }}\n      >\n        <View style={{ flex: 1, paddingTop: 20 }}>\n          <BarCodeScanner\n            onBarCodeScanned={handleBarCodeScanned}\n            type={type}\n            barCodeTypes={[BarCodeScanner.Constants.BarCodeType.qr]}\n            style={[StyleSheet.absoluteFillObject, styles.container]}\n          >\n            <View\n              style={{\n                flex: 1,\n                backgroundColor: \"transparent\",\n                flexDirection: \"row\",\n                margin: 30,\n              }}\n            >\n              <BarcodeMask edgeColor=\"#62B1F6\" showAnimatedLine />\n              <TouchableOpacity\n                style={{\n                  flex: 1,\n                  alignItems: \"center\",\n                }}\n                onPress={() => {\n                  setScanned(false);\n                }}\n              >\n                <Text style={{ fontSize: 18, margin: 5, color: \"white\" }}>\n                  SCAN AGAIN\n                </Text>\n              </TouchableOpacity>\n              <TouchableOpacity\n                style={{\n                  flex: 1,\n                  alignItems: \"flex-start\",\n                }}\n                onPress={() => {\n                  setOpenScanner(false);\n                }}\n              >\n                <Text style={{ fontSize: 18, margin: 5, color: \"white\" }}>\n                  BACK\n                </Text>\n              </TouchableOpacity>\n              <TouchableOpacity\n                style={{\n                  flex: 1,\n                  alignItems: \"flex-end\",\n                }}\n                onPress={() => {\n                  setType(\n                    type === BarCodeScanner.Constants.Type.back\n                      ? BarCodeScanner.Constants.Type.front\n                      : BarCodeScanner.Constants.Type.back\n                  );\n                }}\n              >\n                <Text style={{ fontSize: 18, margin: 5, color: \"white\" }}>\n                  {\" \"}\n                  Flip{\" \"}\n                </Text>\n              </TouchableOpacity>\n            </View>\n          </BarCodeScanner>\n        </View>\n      </Modal>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: \"80%\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}