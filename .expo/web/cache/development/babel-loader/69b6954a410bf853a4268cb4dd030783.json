{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/alvinneri/Desktop/Projects/PMS Mobile/property-management-mobile/employee-app/screens/scanner/index.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from \"react\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { BarCodeScanner, BarCodeScannerResult } from \"expo-barcode-scanner\";\nimport BarcodeMask from \"react-native-barcode-mask\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { db, auth } from \"../../firebase/config\";\nimport Toast from \"react-native-toast-message\";\nimport { setLoading } from \"../../redux/public/actions\";\nvar finderWidth = 280;\nvar finderHeight = 230;\nvar width = Dimensions.get(\"window\").width;\nvar height = Dimensions.get(\"window\").height;\nvar viewMinX = (width - finderWidth) / 2;\nvar viewMinY = (height - finderHeight) / 2;\nexport default function BarCodeScanScreen() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(BarCodeScanner.Constants.Type.back),\n      _useState4 = _slicedToArray(_useState3, 2),\n      type = _useState4[0],\n      setType = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      scanned = _useState6[0],\n      setScanned = _useState6[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.public;\n  }),\n      user = _useSelector.user;\n\n  var dispatch = useDispatch();\n  useEffect(function () {\n    (function _callee() {\n      var _await$BarCodeScanner, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(BarCodeScanner.requestPermissionsAsync());\n\n            case 2:\n              _await$BarCodeScanner = _context.sent;\n              status = _await$BarCodeScanner.status;\n              setHasPermission(status === \"granted\");\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var saveData = function saveData(data) {\n    var floorId = data.split(\"_\")[0];\n    var floorNumber = data.split(\"_\")[1];\n    var description = data.split(\"_\")[2];\n    dispatch(setLoading(true));\n    db.collection(\"users\").doc(user.uid).update({\n      location: {\n        floorId: floorId,\n        floorNumber: floorNumber,\n        description: description,\n        time: new Date()\n      }\n    }).then(function () {});\n    var securityRef = db.collection(\"security\").doc(user.uid);\n    securityRef.get().then(function (docSnapshot) {\n      if (docSnapshot.exists) {\n        securityRef.onSnapshot(function (doc) {\n          securityRef.collection(\"history\").add({\n            floorId: floorId,\n            floorNumber: floorNumber,\n            description: description,\n            time: new Date()\n          });\n        });\n      } else {\n        securityRef.set({\n          firstName: user.firstName,\n          lastName: user.lastName,\n          uid: user.uid,\n          condoId: user.invitedBy.trim()\n        });\n        securityRef.collection(\"history\").add({\n          floorId: floorId,\n          floorNumber: floorNumber,\n          description: description,\n          time: new Date()\n        });\n      }\n    }).finally(function () {\n      dispatch(setLoading(false));\n    });\n  };\n\n  var handleBarCodeScanned = function handleBarCodeScanned(scanningResult) {\n    if (!scanned) {\n      var _type = scanningResult.type,\n          data = scanningResult.data,\n          _scanningResult$bound = scanningResult.bounds;\n      _scanningResult$bound = _scanningResult$bound === void 0 ? {} : _scanningResult$bound;\n      var origin = _scanningResult$bound.origin;\n      var x = origin.x,\n          y = origin.y;\n\n      if (x >= viewMinX && y >= viewMinY && x <= viewMinX + finderWidth / 2 && y <= viewMinY + finderHeight / 2) {\n        setScanned(true);\n        saveData(data);\n        alert(\"Successfully scanned qr. You are in floor number \" + data.split(\"_\")[1] + \" \" + data.split(\"_\")[2]);\n      }\n    }\n  };\n\n  if (hasPermission === null) {\n    return React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 12\n      }\n    }, \"Requesting for camera permission\");\n  }\n\n  if (hasPermission === false) {\n    return React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 12\n      }\n    }, \"No access to camera\");\n  }\n\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }\n  }, React.createElement(BarCodeScanner, {\n    onBarCodeScanned: handleBarCodeScanned,\n    type: type,\n    barCodeTypes: [BarCodeScanner.Constants.BarCodeType.qr],\n    style: [StyleSheet.absoluteFillObject, styles.container],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      backgroundColor: \"transparent\",\n      flexDirection: \"row\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }, React.createElement(BarcodeMask, {\n    edgeColor: \"#62B1F6\",\n    showAnimatedLine: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 11\n    }\n  }), scanned && React.createElement(Button, {\n    title: \"Scan Again\",\n    onPress: function onPress() {\n      return setScanned(false);\n    },\n    style: {\n      marginVertical: 50,\n      color: \"white\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }), React.createElement(TouchableOpacity, {\n    style: {\n      flex: 1,\n      alignItems: \"flex-end\"\n    },\n    onPress: function onPress() {\n      setType(type === BarCodeScanner.Constants.Type.back ? BarCodeScanner.Constants.Type.front : BarCodeScanner.Constants.Type.back);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontSize: 18,\n      margin: 5,\n      color: \"white\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }, \" \", \"Flip\", \" \")))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\"\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: \"80%\"\n  }\n});","map":{"version":3,"sources":["/Users/alvinneri/Desktop/Projects/PMS Mobile/property-management-mobile/employee-app/screens/scanner/index.js"],"names":["React","useEffect","useState","BarCodeScanner","BarCodeScannerResult","BarcodeMask","useSelector","useDispatch","db","auth","Toast","setLoading","finderWidth","finderHeight","width","Dimensions","get","height","viewMinX","viewMinY","BarCodeScanScreen","hasPermission","setHasPermission","Constants","Type","back","type","setType","scanned","setScanned","state","public","user","dispatch","requestPermissionsAsync","status","saveData","data","floorId","split","floorNumber","description","collection","doc","uid","update","location","time","Date","then","securityRef","docSnapshot","exists","onSnapshot","add","set","firstName","lastName","condoId","invitedBy","trim","finally","handleBarCodeScanned","scanningResult","bounds","origin","x","y","alert","flex","BarCodeType","qr","StyleSheet","absoluteFillObject","styles","container","backgroundColor","flexDirection","marginVertical","color","alignItems","front","fontSize","margin","create","justifyContent","title","fontWeight","separator"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;;;;AASA,SAASC,cAAT,EAAyBC,oBAAzB,QAAqD,sBAArD;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,EAAT,EAAaC,IAAb;AACA,OAAOC,KAAP,MAAkB,4BAAlB;AACA,SAASC,UAAT;AACA,IAAMC,WAAW,GAAG,GAApB;AACA,IAAMC,YAAY,GAAG,GAArB;AACA,IAAMC,KAAK,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBF,KAAvC;AACA,IAAMG,MAAM,GAAGF,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,MAAxC;AACA,IAAMC,QAAQ,GAAG,CAACJ,KAAK,GAAGF,WAAT,IAAwB,CAAzC;AACA,IAAMO,QAAQ,GAAG,CAACF,MAAM,GAAGJ,YAAV,IAA0B,CAA3C;AAEA,eAAe,SAASO,iBAAT,GAA6B;AAAA,kBACAlB,QAAQ,CAAC,IAAD,CADR;AAAA;AAAA,MACnCmB,aADmC;AAAA,MACpBC,gBADoB;;AAAA,mBAElBpB,QAAQ,CAACC,cAAc,CAACoB,SAAf,CAAyBC,IAAzB,CAA8BC,IAA/B,CAFU;AAAA;AAAA,MAEnCC,IAFmC;AAAA,MAE7BC,OAF6B;;AAAA,mBAGZzB,QAAQ,CAAC,KAAD,CAHI;AAAA;AAAA,MAGnC0B,OAHmC;AAAA,MAG1BC,UAH0B;;AAAA,qBAIzBvB,WAAW,CAAC,UAACwB,KAAD;AAAA,WAAWA,KAAK,CAACC,MAAjB;AAAA,GAAD,CAJc;AAAA,MAIlCC,IAJkC,gBAIlCA,IAJkC;;AAK1C,MAAMC,QAAQ,GAAG1B,WAAW,EAA5B;AAEAN,EAAAA,SAAS,CAAC,YAAM;AACd,KAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAC0BE,cAAc,CAAC+B,uBAAf,EAD1B;;AAAA;AAAA;AACSC,cAAAA,MADT,yBACSA,MADT;AAECb,cAAAA,gBAAgB,CAACa,MAAM,KAAK,SAAZ,CAAhB;;AAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAID,GALQ,EAKN,EALM,CAAT;;AAOA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,IAAD,EAAU;AACzB,QAAIC,OAAO,GAAGD,IAAI,CAACE,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAd;AACA,QAAIC,WAAW,GAAGH,IAAI,CAACE,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAlB;AACA,QAAIE,WAAW,GAAGJ,IAAI,CAACE,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAlB;AAEAN,IAAAA,QAAQ,CAACtB,UAAU,CAAC,IAAD,CAAX,CAAR;AAEAH,IAAAA,EAAE,CAACkC,UAAH,CAAc,OAAd,EACGC,GADH,CACOX,IAAI,CAACY,GADZ,EAEGC,MAFH,CAEU;AACNC,MAAAA,QAAQ,EAAE;AACRR,QAAAA,OAAO,EAAEA,OADD;AAERE,QAAAA,WAAW,EAAEA,WAFL;AAGRC,QAAAA,WAAW,EAAEA,WAHL;AAIRM,QAAAA,IAAI,EAAE,IAAIC,IAAJ;AAJE;AADJ,KAFV,EAUGC,IAVH,CAUQ,YAAM,CAAE,CAVhB;AAYA,QAAMC,WAAW,GAAG1C,EAAE,CAACkC,UAAH,CAAc,UAAd,EAA0BC,GAA1B,CAA8BX,IAAI,CAACY,GAAnC,CAApB;AAEAM,IAAAA,WAAW,CACRlC,GADH,GAEGiC,IAFH,CAEQ,UAACE,WAAD,EAAiB;AACrB,UAAIA,WAAW,CAACC,MAAhB,EAAwB;AACtBF,QAAAA,WAAW,CAACG,UAAZ,CAAuB,UAACV,GAAD,EAAS;AAC9BO,UAAAA,WAAW,CAACR,UAAZ,CAAuB,SAAvB,EAAkCY,GAAlC,CAAsC;AACpChB,YAAAA,OAAO,EAAEA,OAD2B;AAEpCE,YAAAA,WAAW,EAAEA,WAFuB;AAGpCC,YAAAA,WAAW,EAAEA,WAHuB;AAIpCM,YAAAA,IAAI,EAAE,IAAIC,IAAJ;AAJ8B,WAAtC;AAMD,SAPD;AAQD,OATD,MASO;AACLE,QAAAA,WAAW,CAACK,GAAZ,CAAgB;AACdC,UAAAA,SAAS,EAAExB,IAAI,CAACwB,SADF;AAEdC,UAAAA,QAAQ,EAAEzB,IAAI,CAACyB,QAFD;AAGdb,UAAAA,GAAG,EAAEZ,IAAI,CAACY,GAHI;AAIdc,UAAAA,OAAO,EAAE1B,IAAI,CAAC2B,SAAL,CAAeC,IAAf;AAJK,SAAhB;AAMAV,QAAAA,WAAW,CAACR,UAAZ,CAAuB,SAAvB,EAAkCY,GAAlC,CAAsC;AACpChB,UAAAA,OAAO,EAAEA,OAD2B;AAEpCE,UAAAA,WAAW,EAAEA,WAFuB;AAGpCC,UAAAA,WAAW,EAAEA,WAHuB;AAIpCM,UAAAA,IAAI,EAAE,IAAIC,IAAJ;AAJ8B,SAAtC;AAMD;AACF,KA1BH,EA2BGa,OA3BH,CA2BW,YAAM;AACb5B,MAAAA,QAAQ,CAACtB,UAAU,CAAC,KAAD,CAAX,CAAR;AACD,KA7BH;AA8BD,GAnDD;;AAqDA,MAAMmD,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,cAAD,EAAoB;AAC/C,QAAI,CAACnC,OAAL,EAAc;AAAA,UACJF,KADI,GACoCqC,cADpC,CACJrC,IADI;AAAA,UACEW,IADF,GACoC0B,cADpC,CACE1B,IADF;AAAA,kCACoC0B,cADpC,CACQC,MADR;AAAA,iEAC6B,EAD7B;AAAA,UACkBC,MADlB,yBACkBA,MADlB;AAAA,UAGJC,CAHI,GAGKD,MAHL,CAGJC,CAHI;AAAA,UAGDC,CAHC,GAGKF,MAHL,CAGDE,CAHC;;AAKZ,UACED,CAAC,IAAIhD,QAAL,IACAiD,CAAC,IAAIhD,QADL,IAEA+C,CAAC,IAAIhD,QAAQ,GAAGN,WAAW,GAAG,CAF9B,IAGAuD,CAAC,IAAIhD,QAAQ,GAAGN,YAAY,GAAG,CAJjC,EAKE;AACAgB,QAAAA,UAAU,CAAC,IAAD,CAAV;AACAO,QAAAA,QAAQ,CAACC,IAAD,CAAR;AACA+B,QAAAA,KAAK,uDAED/B,IAAI,CAACE,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAFC,SAGCF,IAAI,CAACE,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAHD,CAAL;AAUD;AACF;AACF,GA1BD;;AA4BA,MAAIlB,aAAa,KAAK,IAAtB,EAA4B;AAC1B,WAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAP;AACD;;AAED,MAAIA,aAAa,KAAK,KAAtB,EAA6B;AAC3B,WAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAP;AACD;;AAED,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEgD,MAAAA,IAAI,EAAE;AAAR,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,cAAD;AACE,IAAA,gBAAgB,EAAEP,oBADpB;AAEE,IAAA,IAAI,EAAEpC,IAFR;AAGE,IAAA,YAAY,EAAE,CAACvB,cAAc,CAACoB,SAAf,CAAyB+C,WAAzB,CAAqCC,EAAtC,CAHhB;AAIE,IAAA,KAAK,EAAE,CAACC,UAAU,CAACC,kBAAZ,EAAgCC,MAAM,CAACC,SAAvC,CAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE;AACLN,MAAAA,IAAI,EAAE,CADD;AAELO,MAAAA,eAAe,EAAE,aAFZ;AAGLC,MAAAA,aAAa,EAAE;AAHV,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAC,SAAvB;AAAiC,IAAA,gBAAgB,MAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,EAQGjD,OAAO,IACN,oBAAC,MAAD;AACE,IAAA,KAAK,EAAC,YADR;AAEE,IAAA,OAAO,EAAE;AAAA,aAAMC,UAAU,CAAC,KAAD,CAAhB;AAAA,KAFX;AAGE,IAAA,KAAK,EAAE;AAAEiD,MAAAA,cAAc,EAAE,EAAlB;AAAsBC,MAAAA,KAAK,EAAE;AAA7B,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,EAeE,oBAAC,gBAAD;AACE,IAAA,KAAK,EAAE;AACLV,MAAAA,IAAI,EAAE,CADD;AAELW,MAAAA,UAAU,EAAE;AAFP,KADT;AAKE,IAAA,OAAO,EAAE,mBAAM;AACbrD,MAAAA,OAAO,CACLD,IAAI,KAAKvB,cAAc,CAACoB,SAAf,CAAyBC,IAAzB,CAA8BC,IAAvC,GACItB,cAAc,CAACoB,SAAf,CAAyBC,IAAzB,CAA8ByD,KADlC,GAEI9E,cAAc,CAACoB,SAAf,CAAyBC,IAAzB,CAA8BC,IAH7B,CAAP;AAKD,KAXH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAaE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEyD,MAAAA,QAAQ,EAAE,EAAZ;AAAgBC,MAAAA,MAAM,EAAE,CAAxB;AAA2BJ,MAAAA,KAAK,EAAE;AAAlC,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,GADH,UAEO,GAFP,CAbF,CAfF,CANF,CADF,CADF;AA6CD;AAED,IAAML,MAAM,GAAGF,UAAU,CAACY,MAAX,CAAkB;AAC/BT,EAAAA,SAAS,EAAE;AACTN,IAAAA,IAAI,EAAE,CADG;AAGTW,IAAAA,UAAU,EAAE,QAHH;AAKTK,IAAAA,cAAc,EAAE;AALP,GADoB;AAS/BC,EAAAA,KAAK,EAAE;AACLJ,IAAAA,QAAQ,EAAE,EADL;AAELK,IAAAA,UAAU,EAAE;AAFP,GATwB;AAa/BC,EAAAA,SAAS,EAAE;AACTV,IAAAA,cAAc,EAAE,EADP;AAET7D,IAAAA,MAAM,EAAE,CAFC;AAGTH,IAAAA,KAAK,EAAE;AAHE;AAboB,CAAlB,CAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  Button,\n  Dimensions,\n  StyleSheet,\n  TouchableOpacity,\n  Text,\n  View,\n} from \"react-native\";\nimport { BarCodeScanner, BarCodeScannerResult } from \"expo-barcode-scanner\";\nimport BarcodeMask from \"react-native-barcode-mask\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { db, auth } from \"../../firebase/config\";\nimport Toast from \"react-native-toast-message\";\nimport { setLoading } from \"../../redux/public/actions\";\nconst finderWidth = 280;\nconst finderHeight = 230;\nconst width = Dimensions.get(\"window\").width;\nconst height = Dimensions.get(\"window\").height;\nconst viewMinX = (width - finderWidth) / 2;\nconst viewMinY = (height - finderHeight) / 2;\n\nexport default function BarCodeScanScreen() {\n  const [hasPermission, setHasPermission] = useState(null);\n  const [type, setType] = useState(BarCodeScanner.Constants.Type.back);\n  const [scanned, setScanned] = useState(false);\n  const { user } = useSelector((state) => state.public);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    (async () => {\n      const { status } = await BarCodeScanner.requestPermissionsAsync();\n      setHasPermission(status === \"granted\");\n    })();\n  }, []);\n\n  const saveData = (data) => {\n    let floorId = data.split(\"_\")[0];\n    let floorNumber = data.split(\"_\")[1];\n    let description = data.split(\"_\")[2];\n\n    dispatch(setLoading(true));\n\n    db.collection(\"users\")\n      .doc(user.uid)\n      .update({\n        location: {\n          floorId: floorId,\n          floorNumber: floorNumber,\n          description: description,\n          time: new Date(),\n        },\n      })\n      .then(() => {});\n\n    const securityRef = db.collection(\"security\").doc(user.uid);\n\n    securityRef\n      .get()\n      .then((docSnapshot) => {\n        if (docSnapshot.exists) {\n          securityRef.onSnapshot((doc) => {\n            securityRef.collection(\"history\").add({\n              floorId: floorId,\n              floorNumber: floorNumber,\n              description: description,\n              time: new Date(),\n            });\n          });\n        } else {\n          securityRef.set({\n            firstName: user.firstName,\n            lastName: user.lastName,\n            uid: user.uid,\n            condoId: user.invitedBy.trim(),\n          });\n          securityRef.collection(\"history\").add({\n            floorId: floorId,\n            floorNumber: floorNumber,\n            description: description,\n            time: new Date(),\n          });\n        }\n      })\n      .finally(() => {\n        dispatch(setLoading(false));\n      });\n  };\n\n  const handleBarCodeScanned = (scanningResult) => {\n    if (!scanned) {\n      const { type, data, bounds: { origin } = {} } = scanningResult;\n\n      const { x, y } = origin;\n\n      if (\n        x >= viewMinX &&\n        y >= viewMinY &&\n        x <= viewMinX + finderWidth / 2 &&\n        y <= viewMinY + finderHeight / 2\n      ) {\n        setScanned(true);\n        saveData(data);\n        alert(\n          `Successfully scanned qr. You are in floor number ${\n            data.split(\"_\")[1]\n          } ${data.split(\"_\")[2]}`\n        );\n        // a.show({\n        //   position: \"center\",\n        //   type: \"info\",\n        //   text1: \"Successfully scanned qr\",\n        // });\n      }\n    }\n  };\n\n  if (hasPermission === null) {\n    return <Text>Requesting for camera permission</Text>;\n  }\n\n  if (hasPermission === false) {\n    return <Text>No access to camera</Text>;\n  }\n\n  return (\n    <View style={{ flex: 1 }}>\n      <BarCodeScanner\n        onBarCodeScanned={handleBarCodeScanned}\n        type={type}\n        barCodeTypes={[BarCodeScanner.Constants.BarCodeType.qr]}\n        style={[StyleSheet.absoluteFillObject, styles.container]}\n      >\n        <View\n          style={{\n            flex: 1,\n            backgroundColor: \"transparent\",\n            flexDirection: \"row\",\n          }}\n        >\n          <BarcodeMask edgeColor=\"#62B1F6\" showAnimatedLine />\n          {scanned && (\n            <Button\n              title=\"Scan Again\"\n              onPress={() => setScanned(false)}\n              style={{ marginVertical: 50, color: \"white\" }}\n            />\n          )}\n          <TouchableOpacity\n            style={{\n              flex: 1,\n              alignItems: \"flex-end\",\n            }}\n            onPress={() => {\n              setType(\n                type === BarCodeScanner.Constants.Type.back\n                  ? BarCodeScanner.Constants.Type.front\n                  : BarCodeScanner.Constants.Type.back\n              );\n            }}\n          >\n            <Text style={{ fontSize: 18, margin: 5, color: \"white\" }}>\n              {\" \"}\n              Flip{\" \"}\n            </Text>\n          </TouchableOpacity>\n        </View>\n      </BarCodeScanner>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n\n    alignItems: \"center\",\n\n    justifyContent: \"center\",\n  },\n\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: \"80%\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}